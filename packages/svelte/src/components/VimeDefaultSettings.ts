/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@vime/core';


interface VimeDefaultSettingsProps {
  
  /** Pins the settings to the defined position inside the video player. This has no effect when
the view is of type `audio`, it will always be `bottomRight`. */
  pin?: Components.VimeDefaultSettings["pin"]
  
  /**  */
  i18n?: Components.VimeDefaultSettings["i18n"]
  
  /**  */
  playbackRate?: Components.VimeDefaultSettings["playbackRate"]
  
  /**  */
  playbackRates?: Components.VimeDefaultSettings["playbackRates"]
  
  /**  */
  playbackQuality?: Components.VimeDefaultSettings["playbackQuality"]
  
  /**  */
  playbackQualities?: Components.VimeDefaultSettings["playbackQualities"]
  
  /**  */
  isCaptionsActive?: Components.VimeDefaultSettings["isCaptionsActive"]
  
  /**  */
  currentCaption?: Components.VimeDefaultSettings["currentCaption"]
  
  /**  */
  textTracks?: Components.VimeDefaultSettings["textTracks"]
}

interface VimeDefaultSettingsEvents {
  
}

interface VimeDefaultSettingsSlots {
  default: any
}
  
/* generated by Svelte v3.24.1 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let vime_default_settings;
	let current;
	const default_slot_template = /*$$slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

	return {
		c() {
			vime_default_settings = element("vime-default-settings");
			if (default_slot) default_slot.c();
			set_custom_element_data(vime_default_settings, "pin", /*pin*/ ctx[0]);
			set_custom_element_data(vime_default_settings, "playback-rate", /*playbackRate*/ ctx[1]);
			set_custom_element_data(vime_default_settings, "playback-quality", /*playbackQuality*/ ctx[2]);
			set_custom_element_data(vime_default_settings, "is-captions-active", /*isCaptionsActive*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, vime_default_settings, anchor);

			if (default_slot) {
				default_slot.m(vime_default_settings, null);
			}

			/*vime_default_settings_binding*/ ctx[13](vime_default_settings);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 2048) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[11], dirty, null, null);
				}
			}

			if (!current || dirty & /*pin*/ 1) {
				set_custom_element_data(vime_default_settings, "pin", /*pin*/ ctx[0]);
			}

			if (!current || dirty & /*playbackRate*/ 2) {
				set_custom_element_data(vime_default_settings, "playback-rate", /*playbackRate*/ ctx[1]);
			}

			if (!current || dirty & /*playbackQuality*/ 4) {
				set_custom_element_data(vime_default_settings, "playback-quality", /*playbackQuality*/ ctx[2]);
			}

			if (!current || dirty & /*isCaptionsActive*/ 8) {
				set_custom_element_data(vime_default_settings, "is-captions-active", /*isCaptionsActive*/ ctx[3]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(vime_default_settings);
			if (default_slot) default_slot.d(detaching);
			/*vime_default_settings_binding*/ ctx[13](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { pin = undefined } = $$props;
	let { i18n = undefined } = $$props;
	let { playbackRate = undefined } = $$props;
	let { playbackRates = undefined } = $$props;
	let { playbackQuality = undefined } = $$props;
	let { playbackQualities = undefined } = $$props;
	let { isCaptionsActive = undefined } = $$props;
	let { currentCaption = undefined } = $$props;
	let { textTracks = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		$$invalidate(14, __mounted = true);
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(4, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	let { $$slots = {}, $$scope } = $$props;

	function vime_default_settings_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(4, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("pin" in $$props) $$invalidate(0, pin = $$props.pin);
		if ("i18n" in $$props) $$invalidate(5, i18n = $$props.i18n);
		if ("playbackRate" in $$props) $$invalidate(1, playbackRate = $$props.playbackRate);
		if ("playbackRates" in $$props) $$invalidate(6, playbackRates = $$props.playbackRates);
		if ("playbackQuality" in $$props) $$invalidate(2, playbackQuality = $$props.playbackQuality);
		if ("playbackQualities" in $$props) $$invalidate(7, playbackQualities = $$props.playbackQualities);
		if ("isCaptionsActive" in $$props) $$invalidate(3, isCaptionsActive = $$props.isCaptionsActive);
		if ("currentCaption" in $$props) $$invalidate(8, currentCaption = $$props.currentCaption);
		if ("textTracks" in $$props) $$invalidate(9, textTracks = $$props.textTracks);
		if ("$$scope" in $$props) $$invalidate(11, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*__mounted, i18n*/ 16416) {
			$: if (__mounted) setProp("i18n", i18n);
		}

		if ($$self.$$.dirty & /*__mounted, playbackRates*/ 16448) {
			$: if (__mounted) setProp("playbackRates", playbackRates);
		}

		if ($$self.$$.dirty & /*__mounted, playbackQualities*/ 16512) {
			$: if (__mounted) setProp("playbackQualities", playbackQualities);
		}

		if ($$self.$$.dirty & /*__mounted, currentCaption*/ 16640) {
			$: if (__mounted) setProp("currentCaption", currentCaption);
		}

		if ($$self.$$.dirty & /*__mounted, textTracks*/ 16896) {
			$: if (__mounted) setProp("textTracks", textTracks);
		}
	};

	return [
		pin,
		playbackRate,
		playbackQuality,
		isCaptionsActive,
		__ref,
		i18n,
		playbackRates,
		playbackQualities,
		currentCaption,
		textTracks,
		getWebComponent,
		$$scope,
		$$slots,
		vime_default_settings_binding
	];
}

class VimeDefaultSettings extends SvelteComponent {
  $$prop_def: VimeDefaultSettingsProps;
  $$events_def: VimeDefaultSettingsEvents;
  $$slot_def: VimeDefaultSettingsSlots;

  $on<K extends keyof VimeDefaultSettingsEvents>(type: K, callback: (e: VimeDefaultSettingsEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<VimeDefaultSettingsProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			pin: 0,
			i18n: 5,
			playbackRate: 1,
			playbackRates: 6,
			playbackQuality: 2,
			playbackQualities: 7,
			isCaptionsActive: 3,
			currentCaption: 8,
			textTracks: 9,
			getWebComponent: 10
		});
	}

	get getWebComponent(): HTMLVimeDefaultSettingsElement | undefined {
		return this.$$.ctx[10];
	}
}

export default VimeDefaultSettings;